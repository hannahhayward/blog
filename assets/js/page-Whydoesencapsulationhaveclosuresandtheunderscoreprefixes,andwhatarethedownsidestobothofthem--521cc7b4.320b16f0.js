(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{491:function(e,t,s){"use strict";s.r(t);var a=s(2),o=Object(a.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"why-does-encapsulation-have-closures-and-the-underscore-prefixes-and-what-are-the-downsides-to-both-of-them"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#why-does-encapsulation-have-closures-and-the-underscore-prefixes-and-what-are-the-downsides-to-both-of-them"}},[this._v("#")]),this._v(" Why does encapsulation have closures and the underscore prefixes, and what are the downsides to both of them?")]),this._v(" "),t("blockquote",[t("p",[this._v("The reason for using encapsulation is actually quite simple; it makes it easier to expand or implement other things. It also helps to prevent bugs. It also allows you to change who can have access to certain data within your page as a way to help prevent malicious activity. We are able to do this through creating the private/public class, or closures. You can add the comment of “//private” or ‘//public” you would do this to prevent the user from not only being able to access certain data that you do not wish them to, but also for it to not show up on the dom as a prompt to the user. While both ways are great sources to have, they both have their downsides as well. Underscores rely on the use of classes and class field specifications. Closures have access to the variables, so if the data is changed within the state, then the data changes everywhere that function was referenced.")])]),this._v(" "),t("p",[this._v("lab link: https://github.com/hannahhayward/vending-machine")])])}),[],!1,null,null,null);t.default=o.exports}}]);